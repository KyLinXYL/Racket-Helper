@@@@ 7617 SICP课本练习2.84

####Guo Wei

(define (install-raise-package) ;install raise functions 
  (define (raise-integer n)
    (make-rational (contents n) 1))
  
;;;;;;;;;;;;在此下方填写你的程序  
  (define (raise-rational x)
    (make-real (/ (+ ((get 'rational 'numer) x) 0.0) ((get 'rational 'denom) x))))
  (define (raise-real x)
    (make-complex-from-real-imag (contents x) 0)) 
  
  (put 'raise 'integer raise-integer)
  (put 'raise 'rational raise-rational)
  (put 'raise 'real raise-real))
 

(define (apply-generic op . args)
  (define (lower t1 t2) ;t1 t2 must be different
    (cond ((eq? t1 'integer) #t)
          ((eq? t1 'complex) #f)
          ((eq? t2 'complex) #t)
          ((eq? t2 'integer) #f)
          ((eq? t1 'rational) #t)
          ((eq? t1 'real) #f)
          ((eq? t2 'rational) #f)
          ((eq? t2 'real) #t)))
  (define (convert x t) ;convert x into a type t object
    (if (eq? (type-tag x) t)
        x
        (convert ((get 'raise (type-tag x)) x) t)))
          
  (let ((type-tags (map type-tag args)))
    (let ((proc (get op type-tags)))
      (if proc
          (apply proc (map contents args))
          (let ((t1 (car type-tags))
                 (t2 (cadr type-tags))
                 (a1 (car args))
                 (a2 (cadr args)))
             (if (lower t1 t2)
                 (let ((new-a1 (convert a1 t2)))
                   (apply-generic op new-a1 a2))
                 (let ((new-a2 (convert a2 t1)))
                   (apply-generic op a1 new-a2))))))))
             
(define (display-obj x)
  (let ((tag (car x)))
    (cond ((or (eq? tag 'integer) (eq? tag 'real)) ; (integer . 5)
           (displayln (list tag (cdr x))))
          ((eq? tag 'rational)
           (displayln (cons tag (list (cadr x) (cddr x))))) ;(rational 19 . 4) (cons 'rational (cons 19 4))
          (else 
           (displayln (cons tag (list  (caddr x) (cdddr x)))))))) 

;;;;;;;;;;;;在此上方填写你的程序  


####1200015420 谢冰阳

(define (install-raise-package) ;install raise functions 
  (define (raise-integer n)
    (make-rational (contents n) 1))
(define (raise-rational n)
    (make-real (/ ((get 'rational 'numer) n) ((get 'rational 'denom) n))))
  (define (raise-real n)
    (make-complex-from-real-imag (contents n) 0))
  (put 'raise 'integer (lambda(n)(raise-integer n)))
  (put 'raise 'rational (lambda(n)(raise-rational n)))
  (put 'raise 'real (lambda(n)(raise-real n))))

(define (apply-generic op . args)
  (define (get-type-priority type)
    (cond ((eq? type 'integer) 1)
          ((eq? type 'rational) 2)
          ((eq? type 'real) 3)
          ((eq? type 'complex) 4)))
  (define (get-type-cast-function type)
    (cond ((= type 1) (get 'raise 'integer))
          ((= type 2) (get 'raise 'rational))
          ((= type 3) (get 'raise 'real))))
  (let ((type-tags (map type-tag args)))
    (let ((proc (get op type-tags)))
      (if proc
          (apply proc (map contents args))
          (if (= (length args) 2)
              (let ((type1 (car type-tags))
                    (type2 (cadr type-tags))
                    (a1 (car args))
                    (a2 (cadr args)))
                (let ((p1 (get-type-priority type1))
                      (p2 (get-type-priority type2)))
                  (if (< p1 p2)
                      (apply-generic op ((get-type-cast-function p1) a1) a2)
                      (apply-generic op a1 ((get-type-cast-function p2) a2)))))
              (error "Wrong number of arguments!"))))))

(define (display-obj n)
  (let ((type (type-tag n)))
    (cond ((eq? type 'integer) (displayln (list (car n) (cdr n))))
          ((eq? type 'rational) (displayln (list (car n) (cadr n) (cddr n))))
          ((eq? type 'real) (displayln (list (car n) (cdr n))))
          ((eq? type 'complex) (displayln (list (car n) (caddr n) (cdddr n)))))))



####谢佩辰 1400012832(xpc)


(define (install-raise-package) ;install raise functions 
  (define (raise-integer n)
    (make-rational (contents n) 1))
  (define (raise-rational x)
    (let ([t (contents x)])
      (make-real (/ (car t) (cdr t)))))
  (define (raise-real x)
    (make-complex-from-real-imag (contents x) 0))
  (put 'raise 'integer raise-integer)
  (put 'raise 'rational raise-rational)
  (put 'raise 'real raise-real)
)

(define (raise x) ((get 'raise (type-tag x)) x))

(define (apply-generic op . args)
  (define (get-level x)
    (let ([t (type-tag x)])
      (cond [(eq? t 'integer) 1]
            [(eq? t 'rational) 2]
            [(eq? t 'real) 3]
            [else 4])))
  (let* ([type-tags (map type-tag args)]
         [proc (get op type-tags)])
    (if proc (apply proc (map contents args))
        (let* ([a (car args)]
               [b (cadr args)]
               [lv1 (get-level a)]
               [lv2 (get-level b)])
          (if (< lv1 lv2) (apply-generic op (raise a) b)
              (apply-generic op a (raise b)))))))

(define (display-obj x)
  (let ([t (type-tag x)] [v (contents x)])
    (cond [(eq? t 'integer) (printf "(integer ~a)" v)]
          [(eq? t 'rational) (printf "(rational ~a ~a)" (car v) (cdr v))]
          [(eq? t 'real) (printf "(real ~a)" v)]
          [else (printf "(complex ~a ~a)" (real-part v) (imag-part v))]))
  (newline))



@@@@ 7618 SICP 课本练习2.92

####Guo Wei

(define (higher x y)
  (define (find x lst)
    (define (helper pos ls)
      (if (null? ls)
          -1
          (if (eq? x (car ls))
              pos
              (helper (+ pos 1) (cdr ls)))))
    (helper 0 lst))
  (define all-letters (list 'a 'b 'c 'd 'e))
  (< (find x all-letters) (find y all-letters)))
(define (apply-generic op . args)
  ;(display "args=" ) (displayln args)
  (let ((type-tags (map type-tag args)))
    (let ((proc (get op type-tags)))
      (if proc
          (apply proc (map contents args))
          (let ((t1 (car type-tags))
                (t2 (cadr type-tags)))
            (let ((raise-t1 (get 'raise t1))
                  (raise-t2 (get 'raise t2))
                  (a1 (car args))
                  (a2 (cadr args)))
              (if raise-t1
                  (apply-generic op (raise-t1 a1 (cadr a2)) a2)  ; a2 is tagged polynomial, so (cadr a1) is it's variable
                  (apply-generic op a1 (raise-t2 a2 (cadr a1))))))))))

;------- install raise package
(define (install-raise-package)
  (define (raise int var) ;int is a tagged integer
    (make-poly var (list (make-term 0 int))))
  (put 'raise 'integer raise))



;------- install polynomial package


(define (install-polynomial-package)
  ;; internal procedures
  
  (define (variable? x) (symbol? x))
  (define (same-variable? v1 v2)
    (and (variable? v1 ) (variable? v2) (eq? v1 v2)))

  (define (make-poly variable term-list)
    (cons variable term-list))
  (define (variable p) (car p))
  (define (term-list p) (cdr p))
  (define (tag p) (attach-tag 'polynomial p))
  

  (define (add-poly p1 p2);p1,p2 no tags
    (let ((v1 (variable p1))
          (v2 (variable p2)))
      (cond ((same-variable? v1 v2)
             (make-poly v1
                        (add-terms (term-list p1)
                                   (term-list p2))))
            ((higher v1 v2)
             (make-poly v1
                        (add-terms (term-list p1)
                                   (list (make-term 0 (tag (make-poly v2 (term-list p2)))))))) ;多项式系数是0次 item
            (else 
             (make-poly v2
                        (add-terms (term-list p2)
                                   (list (make-term 0 (tag (make-poly v1 (term-list p1)))))))))))

  (define (mul-poly p1 p2);p1,p2 no tags
    (let ((v1 (variable p1))
          (v2 (variable p2)))
      (cond ((same-variable? v1 v2)
             (make-poly v1
                        (mul-terms (term-list p1)
                                   (term-list p2))))
            ((higher v1 v2)
             (make-poly v1
                        (mul-terms (term-list p1)
                                   (list (make-term 0 (tag (make-poly v2 (term-list p2))))))))
            (else 
             (make-poly v2
                        (mul-terms (term-list p2)
                                   (list (make-term 0 (tag (make-poly v1 (term-list p1)))))))))))


  (define (add-terms L1 L2)
    
    (cond ((empty-termlist? L1) L2)
          ((empty-termlist? L2) L1)
          (else
           (let ((t1 (first-term L1)) (t2 (first-term L2)))
             (cond ((> (order t1) (order t2))
                    (adjoin-term
                     t1 (add-terms (rest-terms L1) L2)))
                   ((< (order t1) (order t2))
                    (adjoin-term
                     t2 (add-terms L1 (rest-terms L2))))
                   (else
                    (adjoin-term
                     (make-term (order t1)
                                (add (coeff t1) (coeff t2)))
                     (add-terms (rest-terms L1)
                                (rest-terms L2)))))))))


  (define (mul-terms L1 L2)
    (if (empty-termlist? L1)
        (the-empty-termlist)
        (add-terms (mul-term-by-all-terms (first-term L1) L2)
                   (mul-terms (rest-terms L1) L2))))
  (define (mul-term-by-all-terms t1 L)
    (if (empty-termlist? L)
        (the-empty-termlist)
        (let ((t2 (first-term L)))
          (adjoin-term
           (make-term (+ (order t1) (order t2))                    
                      (mul (coeff t1) (coeff t2)))
           (mul-term-by-all-terms t1 (rest-terms L))))))
  (define (=zero? coeff)
    (if (pair? coeff)
        (null? coeff)
        (= 0 coeff)))
  (define (adjoin-term term term-list)
    (if (=zero? (coeff term))
        term-list
        (cons term term-list)))
  (define (the-empty-termlist) '())
  (define (first-term term-list) (car term-list))
  (define (rest-terms term-list) (cdr term-list))
  (define (empty-termlist? term-list) (null? term-list))
  (define (make-term order coeff) (list order coeff))
  (define (order term) (car term))
  (define (coeff term) (cadr term))

  
  (put 'add '(polynomial polynomial) 
       (lambda (p1 p2) (tag (add-poly p1 p2))))
  (put 'mul '(polynomial polynomial) 
       (lambda (p1 p2) (tag (mul-poly p1 p2))))
  (put 'make 'polynomial
       (lambda (var terms) (tag (make-poly var terms))))
  (put 'make 'polynomial-term 
       make-term))
(define (decode-poly p) ; p is tagged polynomial ,like (polynomial x (2 (integer . 6)) (1 (integer . 1)) (0 (integer . 3)))
  (define (decode-item-list items) ;items is like  ((2 (integer . 6)) (1 (integer . 1)) (0 (polynomial y (integer . 3)))
    (if (null? items)
        '()
        (let ((first-item (car items)))
          (let ((order (car first-item))
                (coeff (cadr first-item)))
            (if (eq? (car coeff) 'polynomial)
                (cons (list order (decode-poly coeff))
                      (decode-item-list (cdr items)))
                (cons (list order (cdr coeff))
                      (decode-item-list (cdr items))))))))
  (cons (cadr p) (decode-item-list (cddr p))))
    

  
(define (build-poly e)  ;e is like   (x (4 3) (3 (y (2 5) (0 4))) (0 5)) =  3x^4 + (5y^2+4)x^3 + 5
  (define (build-items lst) ;lst is like  ((4 3) (3 (y (2 5) (0 4))) (0 5))
    (if (null? lst)
        '()
        (let ((first-item (car lst)))
          (let ((order (car first-item))
                (coeff (cadr first-item)))
            (if (pair? coeff)
                (cons (make-term order (build-poly coeff))
                      (build-items (cdr lst)))
                (cons (make-term order (make-integer coeff))
                      (build-items (cdr lst))))))))
  (make-poly (car e) (build-items (cdr e))))

(define (display-poly p)
  (displayln (decode-poly p)))

(install-raise-package)



####1400012616 Luolc

(define (apply-generic op . args)
  (define (symbol-priority symbol)
    (cond ((eq? symbol 'a) 5)
          ((eq? symbol 'b) 4)
          ((eq? symbol 'c) 3)
          ((eq? symbol 'd) 2)
          ((eq? symbol 'e) 1)))
  (let ((type-tags (map type-tag args)))
    (let ((proc (get op type-tags)))
      (if (= (length args) 2)
          (let ((type1 (car type-tags))
                (type2 (cadr type-tags))
                (a1 (car args))
                (a2 (cadr args)))
            (cond ((and (eq? type1 'integer) (eq? type2 'integer)) (apply proc (map contents args)))
                  ((eq? type1 'integer)
                   (apply-generic op ((get 'make 'polynomial) (cadr a2) (list (make-term 0 a1))) a2))
                  ((eq? type2 'integer)
                   (apply-generic op a1 ((get 'make 'polynomial) (cadr a1) (list (make-term 0 a2)))))
                  (else
                   (let ((symbol1 (cadr a1))
                         (symbol2 (cadr a2)))
                     (let ((priority1 (symbol-priority symbol1))
                           (priority2 (symbol-priority symbol2)))
                       (cond ((> priority1 priority2)
                              (apply-generic op a1 ((get 'make 'polynomial) (cadr a1) (list (make-term 0 a2)))))
                             ((< priority1 priority2)
                              (apply-generic op ((get 'make 'polynomial) (cadr a2) (list (make-term 0 a1))) a2))
                             (else (apply proc (map contents args)))))))))
          (error "Invalid operation")))))

(define (int->poly i var)
  (build-poly (list var (list 0 (cdr i)))))

(define (install-polynomial-package)
  (define (tag x) (cons 'polynomial x))
  (define (variable p) (cadr p))
  (define (term-list p) (cddr p))
  (define (get-high-var p1 p2)
    (let((v1 (symbol->string (variable p1)))
         (v2 (symbol->string (variable p2))))
      (if(string<? v1 v2)
         (variable p1)
         (variable p2))))
  (define (raise-var p var)
    (if(eq? var (variable p))
       p
       (make-poly var (list (make-term 0 p)))))
  (define (add-terms L1 L2)
    (cond((null? L1) L2)
         ((null? L2) L1)
         (else
          (let((t1 (car L1)) (t2 (car L2)))
            (let((order1 (car t1)) (order2 (car t2)))
              (cond((> order1 order2)
                    (cons t1 (add-terms (cdr L1) L2)))
                   ((< order1 order2)
                    (cons t2 (add-terms L1 (cdr L2))))
                   (else
                    (cons (make-term order1 (add (cadr t1) (cadr t2)))
                          (add-terms (cdr L1) (cdr L2))))))))))
  (define (mul-terms L1 L2)
    (if (null? L1)
        '()
        (add-terms (mul-term-by-all-terms (car L1) L2)
                   (mul-terms (cdr L1) L2))))
  (define (mul-term-by-all-terms t1 L)
    (if (null? L)
        '()
        (let ((t2 (car L)))
          (cons
           (make-term (+ (car t1) (car t2))
                      (mul (cadr t1) (cadr t2)))
           (mul-term-by-all-terms t1 (cdr L))))))
  (define (add-poly p1 p2)
    (set! p1 (tag p1))
    (set! p2 (tag p2))
    (define high-var (get-high-var p1 p2))
    (set! p1 (raise-var p1 high-var))
    (set! p2 (raise-var p2 high-var))
    (make-poly high-var
               (add-terms (term-list p1)
                          (term-list p2))))
  (define (mul-poly p1 p2)
    (set! p1 (tag p1))
    (set! p2 (tag p2))
    (define high-var (get-high-var p1 p2))
    (set! p1 (raise-var p1 high-var))
    (set! p2 (raise-var p2 high-var))
    (make-poly high-var
               (mul-terms (term-list p1)
                          (term-list p2))))
    
  (put 'make 'polynomial
       (lambda (var terms)
         (tag (cons var terms))))
  (put 'make 'polynomial-term
       (lambda (order coeff) (list order coeff)))
  (put-coercion 'integer 'polynomial (lambda (x) (int->poly x 'z)))
  (put 'add '(polynomial polynomial) add-poly)
  (put 'mul '(polynomial polynomial) mul-poly)    
  (void))

(define (display-poly n)
  (define (get-term terms)
    (if (null? terms)
        '()
        (let ((term (car terms)))
          (let ((order (car term))
                (cof (cadr term)))
            (if (eq? (car cof) 'integer)
                (cons (list order (cdr cof)) (get-term (cdr terms)))
                (cons (list order (get-list cof)) (get-term (cdr terms))))))))
  (define (get-list now)
    (if (eq? (type-tag now) 'polynomial)
      (append (list (cadr now)) (get-term (cddr now)))
      (void)))
  (displayln (get-list n)))

(define (build-poly polylist)
  (define (build-term x)
    (if (list? (cadr x))
       (make-term (car x) (build-poly (cadr x)))
       (make-term (car x) (make-integer (cadr x)))))
  (if(list? polylist)
     (make-poly (car polylist) (map build-term (cdr polylist)))
     (make-integer polylist)))



####1400012704(章玄润)

(define (install-polynomial-package)
  (define (cmp x y)
    (cond ((or (eq? x 'a) (eq? y 'a)) 'a)
          ((or (eq? x 'b) (eq? y 'b)) 'b)
          ((or (eq? x 'c) (eq? y 'c)) 'c)
          ((or (eq? x 'd) (eq? y 'd)) 'd)
          (else 'e)))
  (define (add-poly p1 p2)
    (if (same-variable? (variable p1) (variable p2))
        (make-poly (variable p1)
                   (add-terms (term-list p1)
                              (term-list p2)))
        (let ((var (cmp (variable p1) (variable p2))))
          (make-poly var
                     (add-terms (if (eq? var (variable p1))
                                    (term-list p1)
                                    (list (list 0 (tag p1))))
                                (if (eq? var (variable p2))
                                    (term-list p2)
                                    (list (list 0 (tag p2)))))))))
  (define (mul-poly p1 p2)
    (if (same-variable? (variable p1) (variable p2))
        (make-poly (variable p1)
                   (mul-terms (term-list p1)
                              (term-list p2)))
        (let ((var (cmp (variable p1) (variable p2))))
          (make-poly var
                     (mul-terms (if (eq? var (variable p1))
                                    (term-list p1)
                                    (list (list 0 (tag p1))))
                                (if (eq? var (variable p2))
                                    (term-list p2)
                                    (list (list 0 (tag p2)))))))))
  (define (make-poly variable term-list)
    (cons variable term-list))
  (define (same-variable? v1 v2)
    (and (variable? v1) (variable? v2) (eq? v1 v2)))
  (define (variable? x) (symbol? x))
  (define (variable p) (car p))
  (define (term-list p) (cdr p))
  (define (=zero? p)
    (if (number? p)
        (= 0 p)
        #f))
  (define (adjoin-term term term-list)
    (if (=zero? (coeff term))
        term-list
        (cons term term-list)))
  (define (the-empty-termlist) '())
  (define (first-term term-list) (car term-list))
  (define (rest-terms term-list) (cdr term-list))
  (define (empty-termlist? term-list) (null? term-list))
  (define (make-term order coeff) (list order coeff))
  (define (order term) (car term))
  (define (coeff term) (cadr term))
  (define (tag p) (attach-tag 'polynomial p))
  (define (add-terms L1 L2)
    (cond ((empty-termlist? L1) L2)
          ((empty-termlist? L2) L1)
          (else
           (let ((t1 (first-term L1)) (t2 (first-term L2)))
             (cond ((> (order t1) (order t2))
                    (adjoin-term
                     t1 (add-terms (rest-terms L1) L2)))
                   ((< (order t1) (order t2))
                    (adjoin-term
                     t2 (add-terms L1 (rest-terms L2))))
                   (else
                    (adjoin-term
                     (make-term (order t1)
                                (add (coeff t1) (coeff t2)))
                     (add-terms (rest-terms L1)
                                (rest-terms L2)))))))))
  (define (mul-terms L1 L2)
    (if (empty-termlist? L1)
        (the-empty-termlist)
        (add-terms (mul-term-by-all-terms (first-term L1) L2)
                   (mul-terms (rest-terms L1) L2))))
  (define (mul-term-by-all-terms t1 L)
    (if (empty-termlist? L)
        (the-empty-termlist)
        (let ((t2 (first-term L)))
          (adjoin-term
           (make-term (+ (order t1) (order t2))
                      (mul (coeff t1) (coeff t2)))
           (mul-term-by-all-terms t1 (rest-terms L))))))
  (put 'add '(polynomial polynomial)
       (lambda (p1 p2) (tag (add-poly p1 p2))))
  (put 'mul '(polynomial polynomial)
       (lambda (p1 p2) (tag (mul-poly p1 p2))))
  (put 'make 'polynomial
       (lambda (var terms) (tag (make-poly var terms)))))

(define (apply-generic op . args)
  (let ((type-tags (map type-tag args)))
    (let ((proc (get op type-tags)))
      (if proc
          (apply proc (map contents args))
          (let ((arg1 (car args))
                (arg2 (cadr args)))
            (apply (get op (list 'polynomial 'polynomial))
                   (list (if (eq? 'integer (type-tag arg1))
                             (list (car (contents arg2)) (list 0 arg1))
                             (contents arg1))
                         (if (eq? 'integer (type-tag arg2))
                             (list (car (contents arg1)) (list 0 arg2))
                             (contents arg2)))))))))

(define (build-poly L)
  (if (number? L)
      (make-integer L)
      (make-poly (car L) (map (lambda(L)(cons (car L) (list (build-poly (cadr L))))) (cdr L)))))

(define (display-poly L)
  (define (solve L)
    (if (eq? 'integer (car L))
        (cdr L)
        (cons (cadr L)
              (map (lambda(L)(list (car L) (solve (cadr L)))) (cddr L)))))
  (displayln (solve L)))

